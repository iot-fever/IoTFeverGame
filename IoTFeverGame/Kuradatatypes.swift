// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file Kurapayload.proto

import Foundation
import ProtocolBuffers

internal struct Kuradatatypes { }

internal func == (lhs: Kuradatatypes.KuraPayload, rhs: Kuradatatypes.KuraPayload) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasTimestamp == rhs.hasTimestamp) && (!lhs.hasTimestamp || lhs.timestamp == rhs.timestamp)
  fieldCheck = fieldCheck && (lhs.hasPosition == rhs.hasPosition) && (!lhs.hasPosition || lhs.position == rhs.position)
  fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(3), endExclusive:Int32(5000))
  fieldCheck = fieldCheck && (lhs.metric == rhs.metric)
  fieldCheck = fieldCheck && (lhs.hasBody == rhs.hasBody) && (!lhs.hasBody || lhs.body == rhs.body)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: Kuradatatypes.KuraPayload.KuraMetric, rhs: Kuradatatypes.KuraPayload.KuraMetric) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasTypes == rhs.hasTypes) && (!lhs.hasTypes || lhs.types == rhs.types)
  fieldCheck = fieldCheck && (lhs.hasDoubleValue == rhs.hasDoubleValue) && (!lhs.hasDoubleValue || lhs.doubleValue == rhs.doubleValue)
  fieldCheck = fieldCheck && (lhs.hasFloatValue == rhs.hasFloatValue) && (!lhs.hasFloatValue || lhs.floatValue == rhs.floatValue)
  fieldCheck = fieldCheck && (lhs.hasLongValue == rhs.hasLongValue) && (!lhs.hasLongValue || lhs.longValue == rhs.longValue)
  fieldCheck = fieldCheck && (lhs.hasIntValue == rhs.hasIntValue) && (!lhs.hasIntValue || lhs.intValue == rhs.intValue)
  fieldCheck = fieldCheck && (lhs.hasBoolValue == rhs.hasBoolValue) && (!lhs.hasBoolValue || lhs.boolValue == rhs.boolValue)
  fieldCheck = fieldCheck && (lhs.hasStringValue == rhs.hasStringValue) && (!lhs.hasStringValue || lhs.stringValue == rhs.stringValue)
  fieldCheck = fieldCheck && (lhs.hasBytesValue == rhs.hasBytesValue) && (!lhs.hasBytesValue || lhs.bytesValue == rhs.bytesValue)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: Kuradatatypes.KuraPayload.KuraPosition, rhs: Kuradatatypes.KuraPayload.KuraPosition) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasLatitude == rhs.hasLatitude) && (!lhs.hasLatitude || lhs.latitude == rhs.latitude)
  fieldCheck = fieldCheck && (lhs.hasLongitude == rhs.hasLongitude) && (!lhs.hasLongitude || lhs.longitude == rhs.longitude)
  fieldCheck = fieldCheck && (lhs.hasAltitude == rhs.hasAltitude) && (!lhs.hasAltitude || lhs.altitude == rhs.altitude)
  fieldCheck = fieldCheck && (lhs.hasPrecision == rhs.hasPrecision) && (!lhs.hasPrecision || lhs.precision == rhs.precision)
  fieldCheck = fieldCheck && (lhs.hasHeading == rhs.hasHeading) && (!lhs.hasHeading || lhs.heading == rhs.heading)
  fieldCheck = fieldCheck && (lhs.hasSpeed == rhs.hasSpeed) && (!lhs.hasSpeed || lhs.speed == rhs.speed)
  fieldCheck = fieldCheck && (lhs.hasTimestamp == rhs.hasTimestamp) && (!lhs.hasTimestamp || lhs.timestamp == rhs.timestamp)
  fieldCheck = fieldCheck && (lhs.hasSatellites == rhs.hasSatellites) && (!lhs.hasSatellites || lhs.satellites == rhs.satellites)
  fieldCheck = fieldCheck && (lhs.hasStatus == rhs.hasStatus) && (!lhs.hasStatus || lhs.status == rhs.status)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal extension Kuradatatypes {
  internal struct KurapayloadRoot {
    internal static var sharedInstance : KurapayloadRoot {
     struct Static {
         static let instance : KurapayloadRoot = KurapayloadRoot()
     }
     return Static.instance
    }
    internal var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    internal func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final internal class KuraPayload : ExtendableMessage, GeneratedMessageProtocol{

    //Nested type declaration start

      final internal class KuraMetric : GeneratedMessage, GeneratedMessageProtocol {


          //Enum type declaration start 

          internal enum ValueType:Int32 {
            case Double = 0
            case Float = 1
            case Int64 = 2
            case Int32 = 3
            case Bool = 4
            case String = 5
            case Bytes = 6

          }

          //Enum type declaration end 

        private(set) var hasName:Bool = false
        private(set) var name:String = ""

        private(set) var types:KuraPayload.KuraMetric.ValueType = KuraPayload.KuraMetric.ValueType.Double
        private(set) var hasTypes:Bool = false
        private(set) var hasDoubleValue:Bool = false
        private(set) var doubleValue:Double = Double(0)

        private(set) var hasFloatValue:Bool = false
        private(set) var floatValue:Float = Float(0)

        private(set) var hasLongValue:Bool = false
        private(set) var longValue:Int64 = Int64(0)

        private(set) var hasIntValue:Bool = false
        private(set) var intValue:Int32 = Int32(0)

        private(set) var hasBoolValue:Bool = false
        private(set) var boolValue:Bool = false

        private(set) var hasStringValue:Bool = false
        private(set) var stringValue:String = ""

        private(set) var hasBytesValue:Bool = false
        private(set) var bytesValue:NSData = NSData()

        required internal init() {
             super.init()
        }
        override internal func isInitialized() -> Bool {
          if !hasName {
            return false
          }
          if !hasTypes {
            return false
          }
         return true
        }
        override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
          if hasName {
            try output.writeString(1, value:name)
          }
          if hasTypes {
            try output.writeEnum(2, value:types.rawValue)
          }
          if hasDoubleValue {
            try output.writeDouble(3, value:doubleValue)
          }
          if hasFloatValue {
            try output.writeFloat(4, value:floatValue)
          }
          if hasLongValue {
            try output.writeInt64(5, value:longValue)
          }
          if hasIntValue {
            try output.writeInt32(6, value:intValue)
          }
          if hasBoolValue {
            try output.writeBool(7, value:boolValue)
          }
          if hasStringValue {
            try output.writeString(8, value:stringValue)
          }
          if hasBytesValue {
            try output.writeData(9, value:bytesValue)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override internal func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasName {
            serialize_size += name.computeStringSize(1)
          }
          if (hasTypes) {
            serialize_size += types.rawValue.computeEnumSize(2)
          }
          if hasDoubleValue {
            serialize_size += doubleValue.computeDoubleSize(3)
          }
          if hasFloatValue {
            serialize_size += floatValue.computeFloatSize(4)
          }
          if hasLongValue {
            serialize_size += longValue.computeInt64Size(5)
          }
          if hasIntValue {
            serialize_size += intValue.computeInt32Size(6)
          }
          if hasBoolValue {
            serialize_size += boolValue.computeBoolSize(7)
          }
          if hasStringValue {
            serialize_size += stringValue.computeStringSize(8)
          }
          if hasBytesValue {
            serialize_size += bytesValue.computeDataSize(9)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Kuradatatypes.KuraPayload.KuraMetric> {
          var mergedArray = Array<Kuradatatypes.KuraPayload.KuraMetric>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Kuradatatypes.KuraPayload.KuraMetric? {
          return try Kuradatatypes.KuraPayload.KuraMetric.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        internal class func parseFromData(data:NSData) throws -> Kuradatatypes.KuraPayload.KuraMetric {
          return try Kuradatatypes.KuraPayload.KuraMetric.Builder().mergeFromData(data, extensionRegistry:Kuradatatypes.KurapayloadRoot.sharedInstance.extensionRegistry).build()
        }
        internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Kuradatatypes.KuraPayload.KuraMetric {
          return try Kuradatatypes.KuraPayload.KuraMetric.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromInputStream(input:NSInputStream) throws -> Kuradatatypes.KuraPayload.KuraMetric {
          return try Kuradatatypes.KuraPayload.KuraMetric.Builder().mergeFromInputStream(input).build()
        }
        internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Kuradatatypes.KuraPayload.KuraMetric {
          return try Kuradatatypes.KuraPayload.KuraMetric.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> Kuradatatypes.KuraPayload.KuraMetric {
          return try Kuradatatypes.KuraPayload.KuraMetric.Builder().mergeFromCodedInputStream(input).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Kuradatatypes.KuraPayload.KuraMetric {
          return try Kuradatatypes.KuraPayload.KuraMetric.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func getBuilder() -> Kuradatatypes.KuraPayload.KuraMetric.Builder {
          return Kuradatatypes.KuraPayload.KuraMetric.classBuilder() as! Kuradatatypes.KuraPayload.KuraMetric.Builder
        }
        internal func getBuilder() -> Kuradatatypes.KuraPayload.KuraMetric.Builder {
          return classBuilder() as! Kuradatatypes.KuraPayload.KuraMetric.Builder
        }
        internal override class func classBuilder() -> MessageBuilder {
          return Kuradatatypes.KuraPayload.KuraMetric.Builder()
        }
        internal override func classBuilder() -> MessageBuilder {
          return Kuradatatypes.KuraPayload.KuraMetric.Builder()
        }
        internal func toBuilder() throws -> Kuradatatypes.KuraPayload.KuraMetric.Builder {
          return try Kuradatatypes.KuraPayload.KuraMetric.builderWithPrototype(self)
        }
        internal class func builderWithPrototype(prototype:Kuradatatypes.KuraPayload.KuraMetric) throws -> Kuradatatypes.KuraPayload.KuraMetric.Builder {
          return try Kuradatatypes.KuraPayload.KuraMetric.Builder().mergeFrom(prototype)
        }
        override internal func writeDescriptionTo(inout output:String, indent:String) throws {
          if hasName {
            output += "\(indent) name: \(name) \n"
          }
          if (hasTypes) {
            output += "\(indent) types: \(types.rawValue)\n"
          }
          if hasDoubleValue {
            output += "\(indent) doubleValue: \(doubleValue) \n"
          }
          if hasFloatValue {
            output += "\(indent) floatValue: \(floatValue) \n"
          }
          if hasLongValue {
            output += "\(indent) longValue: \(longValue) \n"
          }
          if hasIntValue {
            output += "\(indent) intValue: \(intValue) \n"
          }
          if hasBoolValue {
            output += "\(indent) boolValue: \(boolValue) \n"
          }
          if hasStringValue {
            output += "\(indent) stringValue: \(stringValue) \n"
          }
          if hasBytesValue {
            output += "\(indent) bytesValue: \(bytesValue) \n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override internal var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasName {
                   hashCode = (hashCode &* 31) &+ name.hashValue
                }
                if hasTypes {
                   hashCode = (hashCode &* 31) &+ Int(types.rawValue)
                }
                if hasDoubleValue {
                   hashCode = (hashCode &* 31) &+ doubleValue.hashValue
                }
                if hasFloatValue {
                   hashCode = (hashCode &* 31) &+ floatValue.hashValue
                }
                if hasLongValue {
                   hashCode = (hashCode &* 31) &+ longValue.hashValue
                }
                if hasIntValue {
                   hashCode = (hashCode &* 31) &+ intValue.hashValue
                }
                if hasBoolValue {
                   hashCode = (hashCode &* 31) &+ boolValue.hashValue
                }
                if hasStringValue {
                   hashCode = (hashCode &* 31) &+ stringValue.hashValue
                }
                if hasBytesValue {
                   hashCode = (hashCode &* 31) &+ bytesValue.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override internal class func className() -> String {
            return "Kuradatatypes.KuraPayload.KuraMetric"
        }
        override internal func className() -> String {
            return "Kuradatatypes.KuraPayload.KuraMetric"
        }
        override internal func classMetaType() -> GeneratedMessage.Type {
            return Kuradatatypes.KuraPayload.KuraMetric.self
        }
        //Meta information declaration end

        final internal class Builder : GeneratedMessageBuilder {
          private var builderResult:Kuradatatypes.KuraPayload.KuraMetric = Kuradatatypes.KuraPayload.KuraMetric()
          internal func getMessage() -> Kuradatatypes.KuraPayload.KuraMetric {
              return builderResult
          }

          required override internal init () {
             super.init()
          }
          var hasName:Bool {
               get {
                    return builderResult.hasName
               }
          }
          var name:String {
               get {
                    return builderResult.name
               }
               set (value) {
                   builderResult.hasName = true
                   builderResult.name = value
               }
          }
          func setName(value:String) -> Kuradatatypes.KuraPayload.KuraMetric.Builder {
            self.name = value
            return self
          }
          internal func clearName() -> Kuradatatypes.KuraPayload.KuraMetric.Builder{
               builderResult.hasName = false
               builderResult.name = ""
               return self
          }
            var hasTypes:Bool{
                get {
                    return builderResult.hasTypes
                }
            }
            var types:KuraPayload.KuraMetric.ValueType {
                get {
                    return builderResult.types
                }
                set (value) {
                    builderResult.hasTypes = true
                    builderResult.types = value
                }
            }
            internal func setTypes(value:KuraPayload.KuraMetric.ValueType) -> Kuradatatypes.KuraPayload.KuraMetric.Builder {
              self.types = value
              return self
            }
            internal func clearTypes() -> Kuradatatypes.KuraPayload.KuraMetric.Builder {
               builderResult.hasTypes = false
               builderResult.types = .Double
               return self
            }
          var hasDoubleValue:Bool {
               get {
                    return builderResult.hasDoubleValue
               }
          }
          var doubleValue:Double {
               get {
                    return builderResult.doubleValue
               }
               set (value) {
                   builderResult.hasDoubleValue = true
                   builderResult.doubleValue = value
               }
          }
          func setDoubleValue(value:Double) -> Kuradatatypes.KuraPayload.KuraMetric.Builder {
            self.doubleValue = value
            return self
          }
          internal func clearDoubleValue() -> Kuradatatypes.KuraPayload.KuraMetric.Builder{
               builderResult.hasDoubleValue = false
               builderResult.doubleValue = Double(0)
               return self
          }
          var hasFloatValue:Bool {
               get {
                    return builderResult.hasFloatValue
               }
          }
          var floatValue:Float {
               get {
                    return builderResult.floatValue
               }
               set (value) {
                   builderResult.hasFloatValue = true
                   builderResult.floatValue = value
               }
          }
          func setFloatValue(value:Float) -> Kuradatatypes.KuraPayload.KuraMetric.Builder {
            self.floatValue = value
            return self
          }
          internal func clearFloatValue() -> Kuradatatypes.KuraPayload.KuraMetric.Builder{
               builderResult.hasFloatValue = false
               builderResult.floatValue = Float(0)
               return self
          }
          var hasLongValue:Bool {
               get {
                    return builderResult.hasLongValue
               }
          }
          var longValue:Int64 {
               get {
                    return builderResult.longValue
               }
               set (value) {
                   builderResult.hasLongValue = true
                   builderResult.longValue = value
               }
          }
          func setLongValue(value:Int64) -> Kuradatatypes.KuraPayload.KuraMetric.Builder {
            self.longValue = value
            return self
          }
          internal func clearLongValue() -> Kuradatatypes.KuraPayload.KuraMetric.Builder{
               builderResult.hasLongValue = false
               builderResult.longValue = Int64(0)
               return self
          }
          var hasIntValue:Bool {
               get {
                    return builderResult.hasIntValue
               }
          }
          var intValue:Int32 {
               get {
                    return builderResult.intValue
               }
               set (value) {
                   builderResult.hasIntValue = true
                   builderResult.intValue = value
               }
          }
          func setIntValue(value:Int32) -> Kuradatatypes.KuraPayload.KuraMetric.Builder {
            self.intValue = value
            return self
          }
          internal func clearIntValue() -> Kuradatatypes.KuraPayload.KuraMetric.Builder{
               builderResult.hasIntValue = false
               builderResult.intValue = Int32(0)
               return self
          }
          var hasBoolValue:Bool {
               get {
                    return builderResult.hasBoolValue
               }
          }
          var boolValue:Bool {
               get {
                    return builderResult.boolValue
               }
               set (value) {
                   builderResult.hasBoolValue = true
                   builderResult.boolValue = value
               }
          }
          func setBoolValue(value:Bool) -> Kuradatatypes.KuraPayload.KuraMetric.Builder {
            self.boolValue = value
            return self
          }
          internal func clearBoolValue() -> Kuradatatypes.KuraPayload.KuraMetric.Builder{
               builderResult.hasBoolValue = false
               builderResult.boolValue = false
               return self
          }
          var hasStringValue:Bool {
               get {
                    return builderResult.hasStringValue
               }
          }
          var stringValue:String {
               get {
                    return builderResult.stringValue
               }
               set (value) {
                   builderResult.hasStringValue = true
                   builderResult.stringValue = value
               }
          }
          func setStringValue(value:String) -> Kuradatatypes.KuraPayload.KuraMetric.Builder {
            self.stringValue = value
            return self
          }
          internal func clearStringValue() -> Kuradatatypes.KuraPayload.KuraMetric.Builder{
               builderResult.hasStringValue = false
               builderResult.stringValue = ""
               return self
          }
          var hasBytesValue:Bool {
               get {
                    return builderResult.hasBytesValue
               }
          }
          var bytesValue:NSData {
               get {
                    return builderResult.bytesValue
               }
               set (value) {
                   builderResult.hasBytesValue = true
                   builderResult.bytesValue = value
               }
          }
          func setBytesValue(value:NSData) -> Kuradatatypes.KuraPayload.KuraMetric.Builder {
            self.bytesValue = value
            return self
          }
          internal func clearBytesValue() -> Kuradatatypes.KuraPayload.KuraMetric.Builder{
               builderResult.hasBytesValue = false
               builderResult.bytesValue = NSData()
               return self
          }
          override internal var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          internal override func clear() -> Kuradatatypes.KuraPayload.KuraMetric.Builder {
            builderResult = Kuradatatypes.KuraPayload.KuraMetric()
            return self
          }
          internal override func clone() throws -> Kuradatatypes.KuraPayload.KuraMetric.Builder {
            return try Kuradatatypes.KuraPayload.KuraMetric.builderWithPrototype(builderResult)
          }
          internal override func build() throws -> Kuradatatypes.KuraPayload.KuraMetric {
               try checkInitialized()
               return buildPartial()
          }
          internal func buildPartial() -> Kuradatatypes.KuraPayload.KuraMetric {
            let returnMe:Kuradatatypes.KuraPayload.KuraMetric = builderResult
            return returnMe
          }
          internal func mergeFrom(other:Kuradatatypes.KuraPayload.KuraMetric) throws -> Kuradatatypes.KuraPayload.KuraMetric.Builder {
            if other == Kuradatatypes.KuraPayload.KuraMetric() {
             return self
            }
            if other.hasName {
                 name = other.name
            }
            if other.hasTypes {
                 types = other.types
            }
            if other.hasDoubleValue {
                 doubleValue = other.doubleValue
            }
            if other.hasFloatValue {
                 floatValue = other.floatValue
            }
            if other.hasLongValue {
                 longValue = other.longValue
            }
            if other.hasIntValue {
                 intValue = other.intValue
            }
            if other.hasBoolValue {
                 boolValue = other.boolValue
            }
            if other.hasStringValue {
                 stringValue = other.stringValue
            }
            if other.hasBytesValue {
                 bytesValue = other.bytesValue
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Kuradatatypes.KuraPayload.KuraMetric.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Kuradatatypes.KuraPayload.KuraMetric.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let tag = try input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 10 :
                name = try input.readString()

              case 16 :
                let valueInttypes = try input.readEnum()
                if let enumstypes = KuraPayload.KuraMetric.ValueType(rawValue:valueInttypes){
                     types = enumstypes
                } else {
                     try unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueInttypes))
                }

              case 25 :
                doubleValue = try input.readDouble()

              case 37 :
                floatValue = try input.readFloat()

              case 40 :
                longValue = try input.readInt64()

              case 48 :
                intValue = try input.readInt32()

              case 56 :
                boolValue = try input.readBool()

              case 66 :
                stringValue = try input.readString()

              case 74 :
                bytesValue = try input.readData()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      final internal class KuraPosition : GeneratedMessage, GeneratedMessageProtocol {
        private(set) var hasLatitude:Bool = false
        private(set) var latitude:Double = Double(0)

        private(set) var hasLongitude:Bool = false
        private(set) var longitude:Double = Double(0)

        private(set) var hasAltitude:Bool = false
        private(set) var altitude:Double = Double(0)

        private(set) var hasPrecision:Bool = false
        private(set) var precision:Double = Double(0)

        private(set) var hasHeading:Bool = false
        private(set) var heading:Double = Double(0)

        private(set) var hasSpeed:Bool = false
        private(set) var speed:Double = Double(0)

        private(set) var hasTimestamp:Bool = false
        private(set) var timestamp:Int64 = Int64(0)

        private(set) var hasSatellites:Bool = false
        private(set) var satellites:Int32 = Int32(0)

        private(set) var hasStatus:Bool = false
        private(set) var status:Int32 = Int32(0)

        required internal init() {
             super.init()
        }
        override internal func isInitialized() -> Bool {
          if !hasLatitude {
            return false
          }
          if !hasLongitude {
            return false
          }
         return true
        }
        override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
          if hasLatitude {
            try output.writeDouble(1, value:latitude)
          }
          if hasLongitude {
            try output.writeDouble(2, value:longitude)
          }
          if hasAltitude {
            try output.writeDouble(3, value:altitude)
          }
          if hasPrecision {
            try output.writeDouble(4, value:precision)
          }
          if hasHeading {
            try output.writeDouble(5, value:heading)
          }
          if hasSpeed {
            try output.writeDouble(6, value:speed)
          }
          if hasTimestamp {
            try output.writeInt64(7, value:timestamp)
          }
          if hasSatellites {
            try output.writeInt32(8, value:satellites)
          }
          if hasStatus {
            try output.writeInt32(9, value:status)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override internal func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasLatitude {
            serialize_size += latitude.computeDoubleSize(1)
          }
          if hasLongitude {
            serialize_size += longitude.computeDoubleSize(2)
          }
          if hasAltitude {
            serialize_size += altitude.computeDoubleSize(3)
          }
          if hasPrecision {
            serialize_size += precision.computeDoubleSize(4)
          }
          if hasHeading {
            serialize_size += heading.computeDoubleSize(5)
          }
          if hasSpeed {
            serialize_size += speed.computeDoubleSize(6)
          }
          if hasTimestamp {
            serialize_size += timestamp.computeInt64Size(7)
          }
          if hasSatellites {
            serialize_size += satellites.computeInt32Size(8)
          }
          if hasStatus {
            serialize_size += status.computeInt32Size(9)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Kuradatatypes.KuraPayload.KuraPosition> {
          var mergedArray = Array<Kuradatatypes.KuraPayload.KuraPosition>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Kuradatatypes.KuraPayload.KuraPosition? {
          return try Kuradatatypes.KuraPayload.KuraPosition.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        internal class func parseFromData(data:NSData) throws -> Kuradatatypes.KuraPayload.KuraPosition {
          return try Kuradatatypes.KuraPayload.KuraPosition.Builder().mergeFromData(data, extensionRegistry:Kuradatatypes.KurapayloadRoot.sharedInstance.extensionRegistry).build()
        }
        internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Kuradatatypes.KuraPayload.KuraPosition {
          return try Kuradatatypes.KuraPayload.KuraPosition.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromInputStream(input:NSInputStream) throws -> Kuradatatypes.KuraPayload.KuraPosition {
          return try Kuradatatypes.KuraPayload.KuraPosition.Builder().mergeFromInputStream(input).build()
        }
        internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Kuradatatypes.KuraPayload.KuraPosition {
          return try Kuradatatypes.KuraPayload.KuraPosition.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> Kuradatatypes.KuraPayload.KuraPosition {
          return try Kuradatatypes.KuraPayload.KuraPosition.Builder().mergeFromCodedInputStream(input).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Kuradatatypes.KuraPayload.KuraPosition {
          return try Kuradatatypes.KuraPayload.KuraPosition.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func getBuilder() -> Kuradatatypes.KuraPayload.KuraPosition.Builder {
          return Kuradatatypes.KuraPayload.KuraPosition.classBuilder() as! Kuradatatypes.KuraPayload.KuraPosition.Builder
        }
        internal func getBuilder() -> Kuradatatypes.KuraPayload.KuraPosition.Builder {
          return classBuilder() as! Kuradatatypes.KuraPayload.KuraPosition.Builder
        }
        internal override class func classBuilder() -> MessageBuilder {
          return Kuradatatypes.KuraPayload.KuraPosition.Builder()
        }
        internal override func classBuilder() -> MessageBuilder {
          return Kuradatatypes.KuraPayload.KuraPosition.Builder()
        }
        internal func toBuilder() throws -> Kuradatatypes.KuraPayload.KuraPosition.Builder {
          return try Kuradatatypes.KuraPayload.KuraPosition.builderWithPrototype(self)
        }
        internal class func builderWithPrototype(prototype:Kuradatatypes.KuraPayload.KuraPosition) throws -> Kuradatatypes.KuraPayload.KuraPosition.Builder {
          return try Kuradatatypes.KuraPayload.KuraPosition.Builder().mergeFrom(prototype)
        }
        override internal func writeDescriptionTo(inout output:String, indent:String) throws {
          if hasLatitude {
            output += "\(indent) latitude: \(latitude) \n"
          }
          if hasLongitude {
            output += "\(indent) longitude: \(longitude) \n"
          }
          if hasAltitude {
            output += "\(indent) altitude: \(altitude) \n"
          }
          if hasPrecision {
            output += "\(indent) precision: \(precision) \n"
          }
          if hasHeading {
            output += "\(indent) heading: \(heading) \n"
          }
          if hasSpeed {
            output += "\(indent) speed: \(speed) \n"
          }
          if hasTimestamp {
            output += "\(indent) timestamp: \(timestamp) \n"
          }
          if hasSatellites {
            output += "\(indent) satellites: \(satellites) \n"
          }
          if hasStatus {
            output += "\(indent) status: \(status) \n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override internal var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasLatitude {
                   hashCode = (hashCode &* 31) &+ latitude.hashValue
                }
                if hasLongitude {
                   hashCode = (hashCode &* 31) &+ longitude.hashValue
                }
                if hasAltitude {
                   hashCode = (hashCode &* 31) &+ altitude.hashValue
                }
                if hasPrecision {
                   hashCode = (hashCode &* 31) &+ precision.hashValue
                }
                if hasHeading {
                   hashCode = (hashCode &* 31) &+ heading.hashValue
                }
                if hasSpeed {
                   hashCode = (hashCode &* 31) &+ speed.hashValue
                }
                if hasTimestamp {
                   hashCode = (hashCode &* 31) &+ timestamp.hashValue
                }
                if hasSatellites {
                   hashCode = (hashCode &* 31) &+ satellites.hashValue
                }
                if hasStatus {
                   hashCode = (hashCode &* 31) &+ status.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override internal class func className() -> String {
            return "Kuradatatypes.KuraPayload.KuraPosition"
        }
        override internal func className() -> String {
            return "Kuradatatypes.KuraPayload.KuraPosition"
        }
        override internal func classMetaType() -> GeneratedMessage.Type {
            return Kuradatatypes.KuraPayload.KuraPosition.self
        }
        //Meta information declaration end

        final internal class Builder : GeneratedMessageBuilder {
          private var builderResult:Kuradatatypes.KuraPayload.KuraPosition = Kuradatatypes.KuraPayload.KuraPosition()
          internal func getMessage() -> Kuradatatypes.KuraPayload.KuraPosition {
              return builderResult
          }

          required override internal init () {
             super.init()
          }
          var hasLatitude:Bool {
               get {
                    return builderResult.hasLatitude
               }
          }
          var latitude:Double {
               get {
                    return builderResult.latitude
               }
               set (value) {
                   builderResult.hasLatitude = true
                   builderResult.latitude = value
               }
          }
          func setLatitude(value:Double) -> Kuradatatypes.KuraPayload.KuraPosition.Builder {
            self.latitude = value
            return self
          }
          internal func clearLatitude() -> Kuradatatypes.KuraPayload.KuraPosition.Builder{
               builderResult.hasLatitude = false
               builderResult.latitude = Double(0)
               return self
          }
          var hasLongitude:Bool {
               get {
                    return builderResult.hasLongitude
               }
          }
          var longitude:Double {
               get {
                    return builderResult.longitude
               }
               set (value) {
                   builderResult.hasLongitude = true
                   builderResult.longitude = value
               }
          }
          func setLongitude(value:Double) -> Kuradatatypes.KuraPayload.KuraPosition.Builder {
            self.longitude = value
            return self
          }
          internal func clearLongitude() -> Kuradatatypes.KuraPayload.KuraPosition.Builder{
               builderResult.hasLongitude = false
               builderResult.longitude = Double(0)
               return self
          }
          var hasAltitude:Bool {
               get {
                    return builderResult.hasAltitude
               }
          }
          var altitude:Double {
               get {
                    return builderResult.altitude
               }
               set (value) {
                   builderResult.hasAltitude = true
                   builderResult.altitude = value
               }
          }
          func setAltitude(value:Double) -> Kuradatatypes.KuraPayload.KuraPosition.Builder {
            self.altitude = value
            return self
          }
          internal func clearAltitude() -> Kuradatatypes.KuraPayload.KuraPosition.Builder{
               builderResult.hasAltitude = false
               builderResult.altitude = Double(0)
               return self
          }
          var hasPrecision:Bool {
               get {
                    return builderResult.hasPrecision
               }
          }
          var precision:Double {
               get {
                    return builderResult.precision
               }
               set (value) {
                   builderResult.hasPrecision = true
                   builderResult.precision = value
               }
          }
          func setPrecision(value:Double) -> Kuradatatypes.KuraPayload.KuraPosition.Builder {
            self.precision = value
            return self
          }
          internal func clearPrecision() -> Kuradatatypes.KuraPayload.KuraPosition.Builder{
               builderResult.hasPrecision = false
               builderResult.precision = Double(0)
               return self
          }
          var hasHeading:Bool {
               get {
                    return builderResult.hasHeading
               }
          }
          var heading:Double {
               get {
                    return builderResult.heading
               }
               set (value) {
                   builderResult.hasHeading = true
                   builderResult.heading = value
               }
          }
          func setHeading(value:Double) -> Kuradatatypes.KuraPayload.KuraPosition.Builder {
            self.heading = value
            return self
          }
          internal func clearHeading() -> Kuradatatypes.KuraPayload.KuraPosition.Builder{
               builderResult.hasHeading = false
               builderResult.heading = Double(0)
               return self
          }
          var hasSpeed:Bool {
               get {
                    return builderResult.hasSpeed
               }
          }
          var speed:Double {
               get {
                    return builderResult.speed
               }
               set (value) {
                   builderResult.hasSpeed = true
                   builderResult.speed = value
               }
          }
          func setSpeed(value:Double) -> Kuradatatypes.KuraPayload.KuraPosition.Builder {
            self.speed = value
            return self
          }
          internal func clearSpeed() -> Kuradatatypes.KuraPayload.KuraPosition.Builder{
               builderResult.hasSpeed = false
               builderResult.speed = Double(0)
               return self
          }
          var hasTimestamp:Bool {
               get {
                    return builderResult.hasTimestamp
               }
          }
          var timestamp:Int64 {
               get {
                    return builderResult.timestamp
               }
               set (value) {
                   builderResult.hasTimestamp = true
                   builderResult.timestamp = value
               }
          }
          func setTimestamp(value:Int64) -> Kuradatatypes.KuraPayload.KuraPosition.Builder {
            self.timestamp = value
            return self
          }
          internal func clearTimestamp() -> Kuradatatypes.KuraPayload.KuraPosition.Builder{
               builderResult.hasTimestamp = false
               builderResult.timestamp = Int64(0)
               return self
          }
          var hasSatellites:Bool {
               get {
                    return builderResult.hasSatellites
               }
          }
          var satellites:Int32 {
               get {
                    return builderResult.satellites
               }
               set (value) {
                   builderResult.hasSatellites = true
                   builderResult.satellites = value
               }
          }
          func setSatellites(value:Int32) -> Kuradatatypes.KuraPayload.KuraPosition.Builder {
            self.satellites = value
            return self
          }
          internal func clearSatellites() -> Kuradatatypes.KuraPayload.KuraPosition.Builder{
               builderResult.hasSatellites = false
               builderResult.satellites = Int32(0)
               return self
          }
          var hasStatus:Bool {
               get {
                    return builderResult.hasStatus
               }
          }
          var status:Int32 {
               get {
                    return builderResult.status
               }
               set (value) {
                   builderResult.hasStatus = true
                   builderResult.status = value
               }
          }
          func setStatus(value:Int32) -> Kuradatatypes.KuraPayload.KuraPosition.Builder {
            self.status = value
            return self
          }
          internal func clearStatus() -> Kuradatatypes.KuraPayload.KuraPosition.Builder{
               builderResult.hasStatus = false
               builderResult.status = Int32(0)
               return self
          }
          override internal var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          internal override func clear() -> Kuradatatypes.KuraPayload.KuraPosition.Builder {
            builderResult = Kuradatatypes.KuraPayload.KuraPosition()
            return self
          }
          internal override func clone() throws -> Kuradatatypes.KuraPayload.KuraPosition.Builder {
            return try Kuradatatypes.KuraPayload.KuraPosition.builderWithPrototype(builderResult)
          }
          internal override func build() throws -> Kuradatatypes.KuraPayload.KuraPosition {
               try checkInitialized()
               return buildPartial()
          }
          internal func buildPartial() -> Kuradatatypes.KuraPayload.KuraPosition {
            let returnMe:Kuradatatypes.KuraPayload.KuraPosition = builderResult
            return returnMe
          }
          internal func mergeFrom(other:Kuradatatypes.KuraPayload.KuraPosition) throws -> Kuradatatypes.KuraPayload.KuraPosition.Builder {
            if other == Kuradatatypes.KuraPayload.KuraPosition() {
             return self
            }
            if other.hasLatitude {
                 latitude = other.latitude
            }
            if other.hasLongitude {
                 longitude = other.longitude
            }
            if other.hasAltitude {
                 altitude = other.altitude
            }
            if other.hasPrecision {
                 precision = other.precision
            }
            if other.hasHeading {
                 heading = other.heading
            }
            if other.hasSpeed {
                 speed = other.speed
            }
            if other.hasTimestamp {
                 timestamp = other.timestamp
            }
            if other.hasSatellites {
                 satellites = other.satellites
            }
            if other.hasStatus {
                 status = other.status
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Kuradatatypes.KuraPayload.KuraPosition.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Kuradatatypes.KuraPayload.KuraPosition.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let tag = try input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 9 :
                latitude = try input.readDouble()

              case 17 :
                longitude = try input.readDouble()

              case 25 :
                altitude = try input.readDouble()

              case 33 :
                precision = try input.readDouble()

              case 41 :
                heading = try input.readDouble()

              case 49 :
                speed = try input.readDouble()

              case 56 :
                timestamp = try input.readInt64()

              case 64 :
                satellites = try input.readInt32()

              case 72 :
                status = try input.readInt32()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end

    private(set) var hasTimestamp:Bool = false
    private(set) var timestamp:Int64 = Int64(0)

    private(set) var hasPosition:Bool = false
    private(set) var position:Kuradatatypes.KuraPayload.KuraPosition!
    private(set) var metric:Array<Kuradatatypes.KuraPayload.KuraMetric>  = Array<Kuradatatypes.KuraPayload.KuraMetric>()
    private(set) var hasBody:Bool = false
    private(set) var body:NSData = NSData()

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if hasPosition {
       if !position.isInitialized() {
         return false
       }
      }
      var isInitmetric:Bool = true
      for oneElementmetric in metric {
          if (!oneElementmetric.isInitialized()) {
              isInitmetric = false
              break 
          }
      }
      if !isInitmetric {
       return isInitmetric
       }
      if !extensionsAreInitialized() {
       return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasTimestamp {
        try output.writeInt64(1, value:timestamp)
      }
      if hasPosition {
        try output.writeMessage(2, value:position)
      }
      try writeExtensionsToCodedOutputStream(output, startInclusive:Int32(3), endExclusive:Int32(5000))
      for oneElementmetric in metric {
          try output.writeMessage(5000, value:oneElementmetric)
      }
      if hasBody {
        try output.writeData(5001, value:body)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasTimestamp {
        serialize_size += timestamp.computeInt64Size(1)
      }
      if hasPosition {
          if let varSizeposition = position?.computeMessageSize(2) {
              serialize_size += varSizeposition
          }
      }
      for oneElementmetric in metric {
          serialize_size += oneElementmetric.computeMessageSize(5000)
      }
      if hasBody {
        serialize_size += body.computeDataSize(5001)
      }
      serialize_size += extensionsSerializedSize()
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Kuradatatypes.KuraPayload> {
      var mergedArray = Array<Kuradatatypes.KuraPayload>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Kuradatatypes.KuraPayload? {
      return try Kuradatatypes.KuraPayload.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    internal class func parseFromData(data:NSData) throws -> Kuradatatypes.KuraPayload {
      return try Kuradatatypes.KuraPayload.Builder().mergeFromData(data, extensionRegistry:Kuradatatypes.KurapayloadRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Kuradatatypes.KuraPayload {
      return try Kuradatatypes.KuraPayload.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) throws -> Kuradatatypes.KuraPayload {
      return try Kuradatatypes.KuraPayload.Builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Kuradatatypes.KuraPayload {
      return try Kuradatatypes.KuraPayload.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> Kuradatatypes.KuraPayload {
      return try Kuradatatypes.KuraPayload.Builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Kuradatatypes.KuraPayload {
      return try Kuradatatypes.KuraPayload.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func getBuilder() -> Kuradatatypes.KuraPayload.Builder {
      return Kuradatatypes.KuraPayload.classBuilder() as! Kuradatatypes.KuraPayload.Builder
    }
    internal func getBuilder() -> Kuradatatypes.KuraPayload.Builder {
      return classBuilder() as! Kuradatatypes.KuraPayload.Builder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Kuradatatypes.KuraPayload.Builder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Kuradatatypes.KuraPayload.Builder()
    }
    internal func toBuilder() throws -> Kuradatatypes.KuraPayload.Builder {
      return try Kuradatatypes.KuraPayload.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Kuradatatypes.KuraPayload) throws -> Kuradatatypes.KuraPayload.Builder {
      return try Kuradatatypes.KuraPayload.Builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasTimestamp {
        output += "\(indent) timestamp: \(timestamp) \n"
      }
      if hasPosition {
        output += "\(indent) position {\n"
        try position?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      try writeExtensionDescription(&output, startInclusive:Int32(3), endExclusive:Int32(5000), indent:indent)
      var metricElementIndex:Int = 0
      for oneElementmetric in metric {
          output += "\(indent) metric[\(metricElementIndex)] {\n"
          try oneElementmetric.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          metricElementIndex++
      }
      if hasBody {
        output += "\(indent) body: \(body) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasTimestamp {
               hashCode = (hashCode &* 31) &+ timestamp.hashValue
            }
            if hasPosition {
                if let hashValueposition = position?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueposition
                }
            }
            hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(3), endExclusive:Int32(5000)))
            for oneElementmetric in metric {
                hashCode = (hashCode &* 31) &+ oneElementmetric.hashValue
            }
            if hasBody {
               hashCode = (hashCode &* 31) &+ body.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Kuradatatypes.KuraPayload"
    }
    override internal func className() -> String {
        return "Kuradatatypes.KuraPayload"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Kuradatatypes.KuraPayload.self
    }
    //Meta information declaration end

    final internal class Builder : ExtendableMessageBuilder {
      private var builderResult:Kuradatatypes.KuraPayload = Kuradatatypes.KuraPayload()
      internal func getMessage() -> Kuradatatypes.KuraPayload {
          return builderResult
      }

      required override internal init () {
         super.init()
      }
      var hasTimestamp:Bool {
           get {
                return builderResult.hasTimestamp
           }
      }
      var timestamp:Int64 {
           get {
                return builderResult.timestamp
           }
           set (value) {
               builderResult.hasTimestamp = true
               builderResult.timestamp = value
           }
      }
      func setTimestamp(value:Int64) -> Kuradatatypes.KuraPayload.Builder {
        self.timestamp = value
        return self
      }
      internal func clearTimestamp() -> Kuradatatypes.KuraPayload.Builder{
           builderResult.hasTimestamp = false
           builderResult.timestamp = Int64(0)
           return self
      }
      var hasPosition:Bool {
           get {
               return builderResult.hasPosition
           }
      }
      var position:Kuradatatypes.KuraPayload.KuraPosition! {
           get {
               if positionBuilder_ != nil {
                  builderResult.position = positionBuilder_.getMessage()
               }
               return builderResult.position
           }
           set (value) {
               builderResult.hasPosition = true
               builderResult.position = value
           }
      }
      private var positionBuilder_:Kuradatatypes.KuraPayload.KuraPosition.Builder! {
           didSet {
              builderResult.hasPosition = true
           }
      }
      internal func getPositionBuilder() -> Kuradatatypes.KuraPayload.KuraPosition.Builder {
        if positionBuilder_ == nil {
           positionBuilder_ = Kuradatatypes.KuraPayload.KuraPosition.Builder()
           builderResult.position = positionBuilder_.getMessage()
           if position != nil {
              try! positionBuilder_.mergeFrom(position)
           }
        }
        return positionBuilder_
      }
      func setPosition(value:Kuradatatypes.KuraPayload.KuraPosition!) -> Kuradatatypes.KuraPayload.Builder {
        self.position = value
        return self
      }
      internal func mergePosition(value:Kuradatatypes.KuraPayload.KuraPosition) throws -> Kuradatatypes.KuraPayload.Builder {
        if builderResult.hasPosition {
          builderResult.position = try Kuradatatypes.KuraPayload.KuraPosition.builderWithPrototype(builderResult.position).mergeFrom(value).buildPartial()
        } else {
          builderResult.position = value
        }
        builderResult.hasPosition = true
        return self
      }
      internal func clearPosition() -> Kuradatatypes.KuraPayload.Builder {
        positionBuilder_ = nil
        builderResult.hasPosition = false
        builderResult.position = nil
        return self
      }
      var metric:Array<Kuradatatypes.KuraPayload.KuraMetric> {
           get {
               return builderResult.metric
           }
           set (value) {
               builderResult.metric = value
           }
      }
      func setMetric(value:Array<Kuradatatypes.KuraPayload.KuraMetric>) -> Kuradatatypes.KuraPayload.Builder {
        self.metric = value
        return self
      }
      internal func clearMetric() -> Kuradatatypes.KuraPayload.Builder {
        builderResult.metric.removeAll(keepCapacity: false)
        return self
      }
      var hasBody:Bool {
           get {
                return builderResult.hasBody
           }
      }
      var body:NSData {
           get {
                return builderResult.body
           }
           set (value) {
               builderResult.hasBody = true
               builderResult.body = value
           }
      }
      func setBody(value:NSData) -> Kuradatatypes.KuraPayload.Builder {
        self.body = value
        return self
      }
      internal func clearBody() -> Kuradatatypes.KuraPayload.Builder{
           builderResult.hasBody = false
           builderResult.body = NSData()
           return self
      }
      override internal var internalGetResult:ExtendableMessage {
           get {
               return builderResult
           }
      }
      internal override func clear() -> Kuradatatypes.KuraPayload.Builder {
        builderResult = Kuradatatypes.KuraPayload()
        return self
      }
      internal override func clone() throws -> Kuradatatypes.KuraPayload.Builder {
        return try Kuradatatypes.KuraPayload.builderWithPrototype(builderResult)
      }
      internal override func build() throws -> Kuradatatypes.KuraPayload {
           try checkInitialized()
           return buildPartial()
      }
      internal func buildPartial() -> Kuradatatypes.KuraPayload {
        let returnMe:Kuradatatypes.KuraPayload = builderResult
        return returnMe
      }
      internal func mergeFrom(other:Kuradatatypes.KuraPayload) throws -> Kuradatatypes.KuraPayload.Builder {
        if other == Kuradatatypes.KuraPayload() {
         return self
        }
        if other.hasTimestamp {
             timestamp = other.timestamp
        }
        if (other.hasPosition) {
            try mergePosition(other.position)
        }
        if !other.metric.isEmpty  {
           builderResult.metric += other.metric
        }
        if other.hasBody {
             body = other.body
        }
        try mergeExtensionFields(other)
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Kuradatatypes.KuraPayload.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Kuradatatypes.KuraPayload.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            timestamp = try input.readInt64()

          case 18 :
            let subBuilder:Kuradatatypes.KuraPayload.KuraPosition.Builder = Kuradatatypes.KuraPayload.KuraPosition.Builder()
            if hasPosition {
              try subBuilder.mergeFrom(position)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            position = subBuilder.buildPartial()

          case 40002 :
            let subBuilder = Kuradatatypes.KuraPayload.KuraMetric.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            metric += [subBuilder.buildPartial()]

          case 40010 :
            body = try input.readData()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
