// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file Person.proto

import Foundation
import ProtocolBuffers

internal func == (lhs: Perfomance, rhs: Perfomance) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasInts == rhs.hasInts) && (!lhs.hasInts || lhs.ints == rhs.ints)
  fieldCheck = fieldCheck && (lhs.hasInts64 == rhs.hasInts64) && (!lhs.hasInts64 || lhs.ints64 == rhs.ints64)
  fieldCheck = fieldCheck && (lhs.hasDoubles == rhs.hasDoubles) && (!lhs.hasDoubles || lhs.doubles == rhs.doubles)
  fieldCheck = fieldCheck && (lhs.hasFloats == rhs.hasFloats) && (!lhs.hasFloats || lhs.floats == rhs.floats)
  fieldCheck = fieldCheck && (lhs.hasStr == rhs.hasStr) && (!lhs.hasStr || lhs.str == rhs.str)
  fieldCheck = fieldCheck && (lhs.hasBytes == rhs.hasBytes) && (!lhs.hasBytes || lhs.bytes == rhs.bytes)
  fieldCheck = fieldCheck && (lhs.hasDescription == rhs.hasDescription) && (!lhs.hasDescription || lhs.description_ == rhs.description_)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal struct PersonRoot {
  internal static var sharedInstance : PersonRoot {
   struct Static {
       static let instance : PersonRoot = PersonRoot()
   }
   return Static.instance
  }
  internal var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(extensionRegistry)
  }
  internal func registerAllExtensions(registry:ExtensionRegistry) {
  }
}

final internal class Perfomance : GeneratedMessage, GeneratedMessageProtocol {
  private(set) var hasInts:Bool = false
  private(set) var ints:Int32 = Int32(0)

  private(set) var hasInts64:Bool = false
  private(set) var ints64:Int64 = Int64(0)

  private(set) var hasDoubles:Bool = false
  private(set) var doubles:Double = Double(0)

  private(set) var hasFloats:Bool = false
  private(set) var floats:Float = Float(0)

  private(set) var hasStr:Bool = false
  private(set) var str:String = ""

  private(set) var hasBytes:Bool = false
  private(set) var bytes:NSData = NSData()

  private(set) var hasDescription:Bool = false
  private(set) var description_:String = ""

  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !hasInts {
      return false
    }
    if !hasInts64 {
      return false
    }
    if !hasDoubles {
      return false
    }
    if !hasFloats {
      return false
    }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasInts {
      try output.writeInt32(1, value:ints)
    }
    if hasInts64 {
      try output.writeInt64(2, value:ints64)
    }
    if hasDoubles {
      try output.writeDouble(3, value:doubles)
    }
    if hasFloats {
      try output.writeFloat(4, value:floats)
    }
    if hasStr {
      try output.writeString(5, value:str)
    }
    if hasBytes {
      try output.writeData(6, value:bytes)
    }
    if hasDescription {
      try output.writeString(7, value:description_)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasInts {
      serialize_size += ints.computeInt32Size(1)
    }
    if hasInts64 {
      serialize_size += ints64.computeInt64Size(2)
    }
    if hasDoubles {
      serialize_size += doubles.computeDoubleSize(3)
    }
    if hasFloats {
      serialize_size += floats.computeFloatSize(4)
    }
    if hasStr {
      serialize_size += str.computeStringSize(5)
    }
    if hasBytes {
      serialize_size += bytes.computeDataSize(6)
    }
    if hasDescription {
      serialize_size += description_.computeStringSize(7)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Perfomance> {
    var mergedArray = Array<Perfomance>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Perfomance? {
    return try Perfomance.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  internal class func parseFromData(data:NSData) throws -> Perfomance {
    return try Perfomance.Builder().mergeFromData(data, extensionRegistry:PersonRoot.sharedInstance.extensionRegistry).build()
  }
  internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Perfomance {
    return try Perfomance.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) throws -> Perfomance {
    return try Perfomance.Builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Perfomance {
    return try Perfomance.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> Perfomance {
    return try Perfomance.Builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Perfomance {
    return try Perfomance.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func getBuilder() -> Perfomance.Builder {
    return Perfomance.classBuilder() as! Perfomance.Builder
  }
  internal func getBuilder() -> Perfomance.Builder {
    return classBuilder() as! Perfomance.Builder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return Perfomance.Builder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return Perfomance.Builder()
  }
  internal func toBuilder() throws -> Perfomance.Builder {
    return try Perfomance.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:Perfomance) throws -> Perfomance.Builder {
    return try Perfomance.Builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) throws {
    if hasInts {
      output += "\(indent) ints: \(ints) \n"
    }
    if hasInts64 {
      output += "\(indent) ints64: \(ints64) \n"
    }
    if hasDoubles {
      output += "\(indent) doubles: \(doubles) \n"
    }
    if hasFloats {
      output += "\(indent) floats: \(floats) \n"
    }
    if hasStr {
      output += "\(indent) str: \(str) \n"
    }
    if hasBytes {
      output += "\(indent) bytes: \(bytes) \n"
    }
    if hasDescription {
      output += "\(indent) description_: \(description_) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasInts {
             hashCode = (hashCode &* 31) &+ ints.hashValue
          }
          if hasInts64 {
             hashCode = (hashCode &* 31) &+ ints64.hashValue
          }
          if hasDoubles {
             hashCode = (hashCode &* 31) &+ doubles.hashValue
          }
          if hasFloats {
             hashCode = (hashCode &* 31) &+ floats.hashValue
          }
          if hasStr {
             hashCode = (hashCode &* 31) &+ str.hashValue
          }
          if hasBytes {
             hashCode = (hashCode &* 31) &+ bytes.hashValue
          }
          if hasDescription {
             hashCode = (hashCode &* 31) &+ description_.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "Perfomance"
  }
  override internal func className() -> String {
      return "Perfomance"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return Perfomance.self
  }
  //Meta information declaration end

  final internal class Builder : GeneratedMessageBuilder {
    private var builderResult:Perfomance = Perfomance()
    internal func getMessage() -> Perfomance {
        return builderResult
    }

    required override internal init () {
       super.init()
    }
    var hasInts:Bool {
         get {
              return builderResult.hasInts
         }
    }
    var ints:Int32 {
         get {
              return builderResult.ints
         }
         set (value) {
             builderResult.hasInts = true
             builderResult.ints = value
         }
    }
    func setInts(value:Int32) -> Perfomance.Builder {
      self.ints = value
      return self
    }
    internal func clearInts() -> Perfomance.Builder{
         builderResult.hasInts = false
         builderResult.ints = Int32(0)
         return self
    }
    var hasInts64:Bool {
         get {
              return builderResult.hasInts64
         }
    }
    var ints64:Int64 {
         get {
              return builderResult.ints64
         }
         set (value) {
             builderResult.hasInts64 = true
             builderResult.ints64 = value
         }
    }
    func setInts64(value:Int64) -> Perfomance.Builder {
      self.ints64 = value
      return self
    }
    internal func clearInts64() -> Perfomance.Builder{
         builderResult.hasInts64 = false
         builderResult.ints64 = Int64(0)
         return self
    }
    var hasDoubles:Bool {
         get {
              return builderResult.hasDoubles
         }
    }
    var doubles:Double {
         get {
              return builderResult.doubles
         }
         set (value) {
             builderResult.hasDoubles = true
             builderResult.doubles = value
         }
    }
    func setDoubles(value:Double) -> Perfomance.Builder {
      self.doubles = value
      return self
    }
    internal func clearDoubles() -> Perfomance.Builder{
         builderResult.hasDoubles = false
         builderResult.doubles = Double(0)
         return self
    }
    var hasFloats:Bool {
         get {
              return builderResult.hasFloats
         }
    }
    var floats:Float {
         get {
              return builderResult.floats
         }
         set (value) {
             builderResult.hasFloats = true
             builderResult.floats = value
         }
    }
    func setFloats(value:Float) -> Perfomance.Builder {
      self.floats = value
      return self
    }
    internal func clearFloats() -> Perfomance.Builder{
         builderResult.hasFloats = false
         builderResult.floats = Float(0)
         return self
    }
    var hasStr:Bool {
         get {
              return builderResult.hasStr
         }
    }
    var str:String {
         get {
              return builderResult.str
         }
         set (value) {
             builderResult.hasStr = true
             builderResult.str = value
         }
    }
    func setStr(value:String) -> Perfomance.Builder {
      self.str = value
      return self
    }
    internal func clearStr() -> Perfomance.Builder{
         builderResult.hasStr = false
         builderResult.str = ""
         return self
    }
    var hasBytes:Bool {
         get {
              return builderResult.hasBytes
         }
    }
    var bytes:NSData {
         get {
              return builderResult.bytes
         }
         set (value) {
             builderResult.hasBytes = true
             builderResult.bytes = value
         }
    }
    func setBytes(value:NSData) -> Perfomance.Builder {
      self.bytes = value
      return self
    }
    internal func clearBytes() -> Perfomance.Builder{
         builderResult.hasBytes = false
         builderResult.bytes = NSData()
         return self
    }
    var hasDescription:Bool {
         get {
              return builderResult.hasDescription
         }
    }
    var description_:String {
         get {
              return builderResult.description_
         }
         set (value) {
             builderResult.hasDescription = true
             builderResult.description_ = value
         }
    }
    func setDescription(value:String) -> Perfomance.Builder {
      self.description_ = value
      return self
    }
    internal func clearDescription() -> Perfomance.Builder{
         builderResult.hasDescription = false
         builderResult.description_ = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Perfomance.Builder {
      builderResult = Perfomance()
      return self
    }
    internal override func clone() throws -> Perfomance.Builder {
      return try Perfomance.builderWithPrototype(builderResult)
    }
    internal override func build() throws -> Perfomance {
         try checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Perfomance {
      let returnMe:Perfomance = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Perfomance) throws -> Perfomance.Builder {
      if other == Perfomance() {
       return self
      }
      if other.hasInts {
           ints = other.ints
      }
      if other.hasInts64 {
           ints64 = other.ints64
      }
      if other.hasDoubles {
           doubles = other.doubles
      }
      if other.hasFloats {
           floats = other.floats
      }
      if other.hasStr {
           str = other.str
      }
      if other.hasBytes {
           bytes = other.bytes
      }
      if other.hasDescription {
           description_ = other.description_
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Perfomance.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Perfomance.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let tag = try input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 8 :
          ints = try input.readInt32()

        case 16 :
          ints64 = try input.readInt64()

        case 25 :
          doubles = try input.readDouble()

        case 37 :
          floats = try input.readFloat()

        case 42 :
          str = try input.readString()

        case 50 :
          bytes = try input.readData()

        case 58 :
          description_ = try input.readString()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}


// @@protoc_insertion_point(global_scope)
